diff --git "a/src/map/utils/synthutils.cpp" "b/src/map/utils/synthutils.cpp"
index 170ada632d..ef93b36468 100644
--- "a/src/map/utils/synthutils.cpp"
+++ "b/src/map/utils/synthutils.cpp"
@@ -619,7 +619,7 @@ namespace synthutils
                 charutils::SaveCharSkills(PChar, skillID);
 
                 // Skill Up removal if using spezialization system
-                if (skillCumulation > settings::get<uint16>("map.CRAFT_SPECIALIZATION_POINTS"))
+                if (skillCumulation > settings::get<uint16>("map.CRAFT_SPECIALIZATION_POINTS") && PChar->getCharVar("[CW]STATUS") == 0)
                 {
                     PChar->RealSkills.skill[skillHighest] -= skillUpAmount;
                     PChar->pushPacket(new CMessageBasicPacket(PChar, PChar, skillHighest, skillUpAmount, 310));
diff --git a/src/map/utils/synthutils.cpp b/src/map/utils/synthutils.cpp
index 170ada632d..731e4c4dc2 100644
--- a/src/map/utils/synthutils.cpp
+++ b/src/map/utils/synthutils.cpp
@@ -455,9 +455,13 @@ namespace synthutils
             }
 
             // Section 2: Skill up equations and penalties
-            double skillUpChance = 0;
+            double skillUpChance         = 0;
+            double craftChanceMultiplier = 1.0;
 
-            double craftChanceMultiplier = settings::get<double>("map.CRAFT_CHANCE_MULTIPLIER");
+            if (PChar->getCharVar("[CW]STATUS") == 0)
+            {
+                craftChanceMultiplier = settings::get<double>("map.CRAFT_CHANCE_MULTIPLIER");
+            }
 
             if (settings::get<bool>("map.CRAFT_MODERN_SYSTEM"))
             {
@@ -565,7 +569,7 @@ namespace synthutils
                 }
 
                 // Do skill amount multiplier
-                if (settings::get<uint8>("map.CRAFT_AMOUNT_MULTIPLIER") > 1)
+                if (settings::get<uint8>("map.CRAFT_AMOUNT_MULTIPLIER") > 1 && PChar->getCharVar("[CW]STATUS") == 0)
                 {
                     skillUpAmount += skillUpAmount * settings::get<uint8>("map.CRAFT_AMOUNT_MULTIPLIER");
                     if (skillUpAmount > 9)
diff --git a/src/search/data_loader.cpp b/src/search/data_loader.cpp
index d74a3307b7..306f87cb94 100644
--- a/src/search/data_loader.cpp
+++ b/src/search/data_loader.cpp
@@ -312,16 +312,11 @@ std::list<SearchEntity*> CDataLoader::GetPlayersList(search_req sr, int* count)
 
             PPlayer->zone        = (PPlayer->zone == 0 ? PPlayer->prevzone : PPlayer->zone);
             PPlayer->languages   = (uint8)sql->GetUIntData(15);
-            PPlayer->mentor      = sql->GetUIntData(16) & NFLAG_MENTOR;
             PPlayer->seacom_type = (uint8)sql->GetUIntData(17);
 
             uint32 partyid  = sql->GetUIntData(1);
             uint32 nameflag = sql->GetUIntData(10);
 
-            if (PPlayer->mentor)
-            {
-                PPlayer->flags1 |= 0x0001;
-            }
             if (partyid == PPlayer->id)
             {
                 PPlayer->flags1 |= 0x0008;
@@ -351,6 +346,19 @@ std::list<SearchEntity*> CDataLoader::GetPlayersList(search_req sr, int* count)
                 PPlayer->flags1 |= 0x8000;
             }
 
+            uint32  cwFlag   = settings::get<uint32>("main.CW_FLAG");
+            uint32 ucwFlag   = settings::get<uint32>("main.UCW_FLAG");
+            uint32 menuFlag  = sql->GetUIntData(16);
+
+            if (nameflag & ucwFlag)
+            {
+                PPlayer->flags1 |= 0x0020;
+            }
+            else if (menuFlag & cwFlag)
+            {
+                PPlayer->flags1 |= 0x0001;
+            }
+
             PPlayer->flags2 = PPlayer->flags1;
 
             // filter by job
diff --git "a/src/map/battlefield.cpp" "b/src/map/battlefield.cpp"
index 4b05a8e9a8..d28ff46a3f 100644
--- "a/src/map/battlefield.cpp"
+++ "b/src/map/battlefield.cpp"
@@ -269,7 +269,7 @@ void CBattlefield::ApplyLevelRestrictions(CCharEntity* PChar) const
         cap += settings::get<int8>("map.BATTLE_CAP_TWEAK"); // We wait till here to do this because we don't want to modify uncapped battles.
 
         // Check if it's a mission and if config setting applies.
-        if (!settings::get<bool>("map.LV_CAP_MISSION_BCNM") && m_isMission == 1)
+        if (!settings::get<bool>("map.LV_CAP_MISSION_BCNM") && m_isMission == 1 && PChar->getCharVar("[CW]STATUS") == 0)
         {
             cap = settings::get<uint8>("main.MAX_LEVEL"); // Cap to server max level to strip buffs - this is the retail diff between uncapped and capped to max lv.
         }
diff --git "a/src/map/utils/charutils.cpp" "b/src/map/utils/charutils.cpp"
index 0d26efa4a8..f3b709dfa3 100644
--- "a/src/map/utils/charutils.cpp"
+++ "b/src/map/utils/charutils.cpp"
@@ -1852,7 +1852,7 @@ namespace charutils
 
         if ((PChar->m_EquipBlock & (1 << equipSlotID)) || !(PItem->getJobs() & (1 << (PChar->GetMJob() - 1))) ||
             (PItem->getSuperiorLevel() > PChar->getMod(Mod::SUPERIOR_LEVEL)) ||
-            (PItem->getReqLvl() > (settings::get<bool>("map.DISABLE_GEAR_SCALING") ? PChar->GetMLevel() : PChar->jobs.job[PChar->GetMJob()])))
+            (PItem->getReqLvl() > (settings::get<bool>("map.DISABLE_GEAR_SCALING") || charutils::GetCharVar(PChar, "[CW]STATUS") > 0 ? PChar->GetMLevel() : PChar->jobs.job[PChar->GetMJob()])))
         {
             return false;
         }
@@ -2609,7 +2609,7 @@ namespace charutils
                 continue;
             }
 
-            if (PItem->getReqLvl() > (settings::get<bool>("map.DISABLE_GEAR_SCALING") ? PChar->GetMLevel() : PChar->jobs.job[PChar->GetMJob()]))
+            if (PItem->getReqLvl() > (settings::get<bool>("map.DISABLE_GEAR_SCALING") || charutils::GetCharVar(PChar, "[CW]STATUS") > 0 ? PChar->GetMLevel() : PChar->jobs.job[PChar->GetMJob()]))
             {
                 UnequipItem(PChar, slotID);
                 continue;
@@ -3183,7 +3183,16 @@ namespace charutils
             // Note this is no longer retail accurate, since now 'decent challenge' mobs allow to cap any skill.
 
             int16  Diff          = MaxSkill - CurSkill / 10;
-            double SkillUpChance = Diff / 5.0 + settings::get<double>("map.SKILLUP_CHANCE_MULTIPLIER") * (2.0 - log10(1.0 + CurSkill / 100));
+            double SkillUpChance = 0;
+            
+             if (PChar->getCharVar("[CW]STATUS") > 0)
+             {
+                 SkillUpChance = (Diff / 5.0) * (2.0 - log10(1.0 + CurSkill / 100));
+             }
+             else
+             {
+                 SkillUpChance = Diff / 5.0 + settings::get<double>("map.SKILLUP_CHANCE_MULTIPLIER") * (2.0 - log10(1.0 + CurSkill / 100));
+             }
 
             double random = xirand::GetRandomNumber(1.);
 
@@ -3266,7 +3275,7 @@ namespace charutils
                 }
 
                 // Do skill amount multiplier (Will only be applied if default setting is changed)
-                if (settings::get<uint8>("map.SKILLUP_AMOUNT_MULTIPLIER") > 1)
+                if (settings::get<uint8>("map.SKILLUP_AMOUNT_MULTIPLIER") > 1 && PChar->getCharVar("[CW]STATUS") == 0)
                 {
                     SkillAmount += (uint8)(SkillAmount * settings::get<uint8>("map.SKILLUP_AMOUNT_MULTIPLIER"));
                     if (SkillAmount > 9)
@@ -3953,6 +3962,11 @@ namespace charutils
             EMobDifficulty mobCheck = CheckMob(maxlevel, moblevel);
             float          exp      = (float)GetBaseExp(maxlevel, moblevel);
 
+            if (PMember->getCharVar("[CW]STATUS") > 0 && pcinzone > 1 && !PMember->PParty->HasTrusts())
+            {
+                exp *= 1.2;
+            }
+
             if (mobCheck > EMobDifficulty::TooWeak)
             {
                 if (PMember->getZone() == PMob->getZone())
@@ -4564,16 +4578,16 @@ namespace charutils
 
     void AddExperiencePoints(bool expFromRaise, CCharEntity* PChar, CBaseEntity* PMob, uint32 exp, EMobDifficulty mobCheck, bool isexpchain)
     {
-        TracyZoneScoped;
-
-        if (PChar->isDead())
-        {
-            return;
-        }
-
         if (!expFromRaise)
         {
-            exp = (uint32)(exp * settings::get<float>("map.EXP_RATE"));
+            if (PChar->getCharVar("[CW]STATUS") > 0)
+            {
+                exp = exp * 0.5;
+            }
+            else
+            {
+                exp = (uint32)(exp * settings::get<float>("map.EXP_RATE"));
+            }
         }
         uint16 currentExp  = PChar->jobs.exp[PChar->GetMJob()];
         bool   onLimitMode = false;
