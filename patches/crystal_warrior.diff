diff --git "a/src/search/data_loader.cpp" "b/src/search/data_loader.cpp"
index d74a3307b7..ec24628040 100644
--- "a/src/search/data_loader.cpp"
+++ "b/src/search/data_loader.cpp"
@@ -312,16 +312,11 @@ std::list<SearchEntity*> CDataLoader::GetPlayersList(search_req sr, int* count)
 
             PPlayer->zone        = (PPlayer->zone == 0 ? PPlayer->prevzone : PPlayer->zone);
             PPlayer->languages   = (uint8)sql->GetUIntData(15);
-            PPlayer->mentor      = sql->GetUIntData(16) & NFLAG_MENTOR;
             PPlayer->seacom_type = (uint8)sql->GetUIntData(17);
 
             uint32 partyid  = sql->GetUIntData(1);
             uint32 nameflag = sql->GetUIntData(10);
 
-            if (PPlayer->mentor)
-            {
-                PPlayer->flags1 |= 0x0001;
-            }
             if (partyid == PPlayer->id)
             {
                 PPlayer->flags1 |= 0x0008;
@@ -351,6 +346,14 @@ std::list<SearchEntity*> CDataLoader::GetPlayersList(search_req sr, int* count)
                 PPlayer->flags1 |= 0x8000;
             }
 
+            uint32  cwFlag  = settings::get<uint32>("main.CW_FLAG");
+            uint32 menuFlag = sql->GetUIntData(16);
+
+            if (menuFlag & cwFlag)
+            {
+                PPlayer->flags1 |= 0x0001;
+            }
+
             PPlayer->flags2 = PPlayer->flags1;
 
             // filter by job
diff --git a/src/map/utils/synthutils.cpp b/src/map/utils/synthutils.cpp
index 170ada632d..860b4431e4 100644
--- a/src/map/utils/synthutils.cpp
+++ b/src/map/utils/synthutils.cpp
@@ -565,7 +565,7 @@ namespace synthutils
                 }
 
                 // Do skill amount multiplier
-                if (settings::get<uint8>("map.CRAFT_AMOUNT_MULTIPLIER") > 1)
+                if (settings::get<uint8>("map.CRAFT_AMOUNT_MULTIPLIER") > 1 && (charutils::GetCharVar(PChar, "[CW]STATUS") == 0))
                 {
                     skillUpAmount += skillUpAmount * settings::get<uint8>("map.CRAFT_AMOUNT_MULTIPLIER");
                     if (skillUpAmount > 9)
@@ -619,7 +619,7 @@ namespace synthutils
                 charutils::SaveCharSkills(PChar, skillID);
 
                 // Skill Up removal if using spezialization system
-                if (skillCumulation > settings::get<uint16>("map.CRAFT_SPECIALIZATION_POINTS"))
+                if (skillCumulation > settings::get<uint16>("map.CRAFT_SPECIALIZATION_POINTS") && (charutils::GetCharVar(PChar, "[CW]STATUS") == 0))
                 {
                     PChar->RealSkills.skill[skillHighest] -= skillUpAmount;
                     PChar->pushPacket(new CMessageBasicPacket(PChar, PChar, skillHighest, skillUpAmount, 310));
diff --git a/src/map/utils/fishingutils.cpp b/src/map/utils/fishingutils.cpp
index e503b6af23..681a67e30b 100644
--- a/src/map/utils/fishingutils.cpp
+++ b/src/map/utils/fishingutils.cpp
@@ -1784,7 +1784,10 @@ namespace fishingutils
         maxChance = std::max(4, distMod + lowerLevelBonus - skillLevelPenalty);
 
         // Configuration multiplier.
-        maxChance = maxChance * settings::get<float>("map.FISHING_SKILL_MULTIPLIER");
+        if ((charutils::GetCharVar(PChar, "[CW]STATUS") == 0))
+        {
+            maxChance = maxChance * settings::get<float>("map.FISHING_SKILL_MULTIPLIER");
+        }
 
         // Moon phase skillup modifiers
         uint8 phase         = CVanaTime::getInstance()->getMoonPhase();
diff --git "a/src/map/utils/charutils.cpp" "b/src/map/utils/charutils.cpp"
index a3d1ee95b1..88e5bf2595 100644
--- "a/src/map/utils/charutils.cpp"
+++ "b/src/map/utils/charutils.cpp"
@@ -1855,7 +1855,7 @@ namespace charutils
 
         if ((PChar->m_EquipBlock & (1 << equipSlotID)) || !(PItem->getJobs() & (1 << (PChar->GetMJob() - 1))) ||
             (PItem->getSuperiorLevel() > PChar->getMod(Mod::SUPERIOR_LEVEL)) ||
-            (PItem->getReqLvl() > (settings::get<bool>("map.DISABLE_GEAR_SCALING") ? PChar->GetMLevel() : PChar->jobs.job[PChar->GetMJob()])))
+            (PItem->getReqLvl() > (settings::get<bool>("map.DISABLE_GEAR_SCALING") || (charutils::GetCharVar(PChar, "[CW]STATUS") > 0) ? PChar->GetMLevel() : PChar->jobs.job[PChar->GetMJob()])))
         {
             return false;
         }
@@ -2612,7 +2612,7 @@ namespace charutils
                 continue;
             }
 
-            if (PItem->getReqLvl() > (settings::get<bool>("map.DISABLE_GEAR_SCALING") ? PChar->GetMLevel() : PChar->jobs.job[PChar->GetMJob()]))
+            if (PItem->getReqLvl() > (settings::get<bool>("map.DISABLE_GEAR_SCALING") || (charutils::GetCharVar(PChar, "[CW]STATUS") > 0) ? PChar->GetMLevel() : PChar->jobs.job[PChar->GetMJob()]))
             {
                 UnequipItem(PChar, slotID);
                 continue;
@@ -3197,6 +3197,14 @@ namespace charutils
             int16  Diff          = MaxSkill - CurSkill / 10;
             double SkillUpChance = Diff / 5.0 + settings::get<double>("map.SKILLUP_CHANCE_MULTIPLIER") * (2.0 - log10(1.0 + CurSkill / 100));
 
+            if ((charutils::GetCharVar(PChar, "[CW]STATUS") > 0))
+            {
+                SkillUpChance = (Diff / 5.0) * (2.0 - log10(1.0 + CurSkill / 100));
+            }
+            else
+            {
+                SkillUpChance = Diff / 5.0 + settings::get<double>("map.SKILLUP_CHANCE_MULTIPLIER") * (2.0 - log10(1.0 + CurSkill / 100));
+            }
             double random = xirand::GetRandomNumber(1.);
 
             if (SkillUpChance > 0.5)
@@ -3278,7 +3286,7 @@ namespace charutils
                 }
 
                 // Do skill amount multiplier (Will only be applied if default setting is changed)
-                if (settings::get<uint8>("map.SKILLUP_AMOUNT_MULTIPLIER") > 1)
+                if (settings::get<uint8>("map.SKILLUP_AMOUNT_MULTIPLIER") > 1 && (charutils::GetCharVar(PChar, "[CW]STATUS") == 0))
                 {
                     SkillAmount += (uint8)(SkillAmount * settings::get<uint8>("map.SKILLUP_AMOUNT_MULTIPLIER"));
                     if (SkillAmount > 9)
@@ -4001,6 +4009,23 @@ namespace charutils
             EMobDifficulty mobCheck = CheckMob(maxlevel, moblevel);
             float          exp      = (float)GetBaseExp(maxlevel, moblevel);
 
+            if ((charutils::GetCharVar(PMember, "[CW]STATUS") > 0) && pcinzone > 1 && PMember != nullptr && PMember->PParty != nullptr && !PMember->PParty->HasTrusts())
+            {
+                if (memberlevel >= 60)
+                {
+                    exp *= 1.3;
+                }
+                else if (memberlevel >= 30)
+                {
+                    exp *= 1.2;
+                }
+                else if (memberlevel >= 20)
+                {
+                    exp *= 1.1;
+                }
+                // 1-19 = 1.0
+            }
+
             if (mobCheck > EMobDifficulty::TooWeak)
             {
                 if (PMember->getZone() == PMob->getZone())
@@ -4619,19 +4644,20 @@ namespace charutils
      *                                                                       *
      ************************************************************************/
 
-    void AddExperiencePoints(bool expFromRaise, CCharEntity* PChar, CBaseEntity* PMob, uint32 exp, EMobDifficulty mobCheck, bool isexpchain)
+void AddExperiencePoints(bool expFromRaise, CCharEntity* PChar, CBaseEntity* PMob, uint32 exp, EMobDifficulty mobCheck, bool isexpchain)
     {
-        TracyZoneScoped;
-
-        if (PChar->isDead())
-        {
-            return;
-        }
-
         if (!expFromRaise)
         {
-            exp = (uint32)(exp * settings::get<float>("map.EXP_RATE"));
+            if ((charutils::GetCharVar(PChar, "[CW]STATUS") > 0))
+            {
+                exp = exp * 0.5;
+            }
+            else
+            {
+                exp = (uint32)(exp * settings::get<float>("map.EXP_RATE"));
+            }
         }
+
         uint16 currentExp  = PChar->jobs.exp[PChar->GetMJob()];
         bool   onLimitMode = false;
 

diff --git a/src/map/roe.cpp b/src/map/roe.cpp
index 718518c0ff..408fd8f556 100644
--- a/src/map/roe.cpp
+++ b/src/map/roe.cpp
@@ -218,7 +218,7 @@ namespace roeutils
     bool event(ROE_EVENT eventID, CCharEntity* PChar, const RoeDatagramList& payload)
     {
         TracyZoneScoped;
-        if (!settings::get<bool>("main.ENABLE_ROE") || !PChar || PChar->objtype != TYPE_PC)
+        if (!settings::get<bool>("main.ENABLE_ROE") || !PChar || PChar->objtype != TYPE_PC || PChar->getCharVar("[CW]STATUS") > 0)
         {
             return false;
         }
@@ -442,7 +442,7 @@ namespace roeutils
     void onCharLoad(CCharEntity* PChar)
     {
         TracyZoneScoped;
-        if (!settings::get<bool>("main.ENABLE_ROE"))
+        if (!settings::get<bool>("main.ENABLE_ROE") || PChar->getCharVar("[CW]STATUS") > 0)
         {
             return;
         }
diff --git "a/src/map/battlefield.cpp" "b/src/map/battlefield.cpp"
index d262b3fa4a..c33b4140b5 100644
--- "a/src/map/battlefield.cpp"
+++ "b/src/map/battlefield.cpp"
@@ -269,7 +269,7 @@ void CBattlefield::ApplyLevelRestrictions(CCharEntity* PChar) const
         cap += settings::get<int8>("map.BATTLE_CAP_TWEAK"); // We wait till here to do this because we don't want to modify uncapped battles.
 
         // Check if it's a mission and if config setting applies.
-        if (!settings::get<bool>("map.LV_CAP_MISSION_BCNM") && m_isMission == 1)
+        if (!settings::get<bool>("map.LV_CAP_MISSION_BCNM") && m_isMission == 1 && PChar->getCharVar("[CW]STATUS") == 0)
         {
             cap = settings::get<uint8>("main.MAX_LEVEL"); // Cap to server max level to strip buffs - this is the retail diff between uncapped and capped to max lv.
         }

diff --git a/src/map/party.cpp b/src/map/party.cpp
index 2a50240ca5..60aef7d702 100644
--- a/src/map/party.cpp
+++ b/src/map/party.cpp
@@ -987,7 +987,7 @@ void CParty::SetSyncTarget(const std::string& MemberName, uint16 message)
         {
             CCharEntity* PChar = (CCharEntity*)PEntity;
             // enable level sync
-            if (PChar->GetMLevel() < 10)
+            if (PChar->GetMLevel() < 15)
             {
                 ((CCharEntity*)GetLeader())->pushPacket(new CMessageBasicPacket((CCharEntity*)GetLeader(), (CCharEntity*)GetLeader(), 0, 10, 541));
                 return;
